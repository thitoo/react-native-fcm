import {useState, useEffect, useCallback} from 'react';
import {Platform} from 'react-native';
import messaging from '@react-native-firebase/messaging';
import PushNotification from 'react-native-push-notification';

const useRetrieveToken = () => {
  const [token, setToken] = useState(null);
  const retrieveToken = useCallback(() => {
    messaging()
      .requestPermission()
      .then(permission => {
        console.log('# Fcm persmission: ', permission);
        messaging()
          .getToken()
          .then(value => {
            setToken(value);
          })
          .catch(error => {
            console.log('# FCM error: ', error);
          });
      })
      .catch(error => {
        console.log('# Fcm permission error: ', error);
      });
  }, []);

  useEffect(() => {
    retrieveToken();
    return messaging().onTokenRefresh(new_token => {
      setToken(new_token);
    });
  }, [retrieveToken]);

  return {token};
};

const useFirebaseMessage = () => {
  const receiveRemoteMessage = useCallback(() => {
    const unsubscribe = messaging().onMessage(async message => {
      console.log('#fcm message: ', message);
      PushNotification.localNotification({
        ...Platform.select({
          android: {
            id: this.lastId, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
            ticker: 'My Notification Ticker', // (optional)
            autoCancel: true, // (optional) default: true
            largeIcon: 'ic_launcher', // (optional) default: "ic_launcher"
            smallIcon: 'ic_notification', // (optional) default: "ic_notification" with fallback for "ic_launcher"
            bigText:
              'My big text that will be shown when notification is expanded', // (optional) default: "message" prop
            subText: 'This is a subText', // (optional) default: none
            color: 'red', // (optional) default: system default
            vibrate: true, // (optional) default: true
            vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
            tag: 'some_tag', // (optional) add tag to message
            group: 'group', // (optional) add group to message
            ongoing: false, // (optional) set whether this is an "ongoing" notification
          },
          ios: {
            alertAction: 'view', // (optional) default: view
            category: '', // (optional) default: empty string
            userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
          },
        }),
        title: 'Local Notification', // (optional)
        message: 'My Notification Message', // (required)
        playSound: true, // (optional) default: true
        soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
        number: 10, // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
        actions: '["Yes", "No"]', // (Android only) See the doc for notification actions to know more
      });
    });
    return unsubscribe;
  }, []);
  useEffect(() => {
    const unsubscribe = receiveRemoteMessage();
    return unsubscribe;
  }, [receiveRemoteMessage]);
};

export {useRetrieveToken, useFirebaseMessage};
